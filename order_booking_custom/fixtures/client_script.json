[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Quality Inspection",
  "enabled": 1,
  "modified": "2024-08-28 18:05:50.049280",
  "module": null,
  "name": "Quality Inspection",
  "script": "frappe.listview_settings['Quality Inspection'] = {\r\n    add_fields: ['status'],\r\n    get_indicator: function(doc) {\r\n        if (doc.status === \"Accepted\") {\r\n            return [__(\"Accepted\"), \"green\", \"status,=,Accepted\"];\r\n        } else if (doc.status === \"Rejected\") {\r\n            return [__(\"Rejected\"), \"red\", \"status,=,Rejected\"];\r\n        }\r\n    }\r\n};",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Order Booking Form",
  "enabled": 1,
  "modified": "2024-11-22 17:05:39.457409",
  "module": "Order Booking Custom",
  "name": "Order Booking Form",
  "script": "frappe.ui.form.on('Order Booking Form', {\r\n\trefresh(frm) {\r\n        frm.add_custom_button(__(\"Create\"), function(){\r\n        //perform desired action such as routing to new form or fetching etc.\r\n            if (frm.doc.customer_name){\r\n                frappe.call({\r\n                    method: \"serial_no_custom.utils.create_sales_order\", //dotted path to server method\r\n                    args:{\"name\":frm.doc.name},\r\n                    freeze: true,\r\n                    freeze_message: \"Creating Stock Entry, Sales Order, Work Order\",\r\n                    callback: function(r) {\r\n                        // code snippet\r\n                    }\r\n                });\r\n                \r\n            }\r\n            \r\n            if (frm.doc.custom_supplier){\r\n                frappe.call({\r\n                    method: \"order_booking_custom.utils.create_purchase_order\", //dotted path to server method\r\n                    args:{\"name\":frm.doc.name},\r\n                    freeze: true,\r\n                    freeze_message: \"Creating Purchase Receipt,Stock Entry, Work Order\",\r\n                    callback: function(r) {\r\n                        // code snippet\r\n                    }\r\n                });\r\n                \r\n            }\r\n    \r\n            // },__(\"Create\"));\r\n            // frm.add_custom_button(__(\"Purchase\"), function(){\r\n            //perform desired action such as routing to new form or fetching etc.\r\n            \r\n\r\n        });\r\n        \r\n        \r\n\t}\r\n});\r\n\r\n\r\n// frappe.ui.form.on('Order Booking Details', {\r\n//     bom: function(frm, cdt, cdn) {\r\n//         var child = locals[cdt][cdn];\r\n//         console.log(\"Hello\")\r\n        \r\n//         frm.fields_dict['bom'].get_query = function(doc) {\r\n//             return {\r\n//                 filters: [\r\n//                     ['Bom', 'item', '=', child.item_code]\r\n//                 ]\r\n//             };\r\n//         };\r\n//     }\r\n// });\r\n\r\n\r\n\r\nfrappe.ui.form.on('Order Booking Details', {\r\n    item_code: function(frm, cdt, cdn) {\r\n        let row = frappe.get_doc(cdt, cdn);\r\n\r\n        if (row.item_code) {\r\n            // Fetch the most recent item price for the selected item_code\r\n            frappe.call({\r\n                method: \"frappe.client.get_list\",\r\n                args: {\r\n                    doctype: \"Item Price\",\r\n                    fields: [\"price_list_rate\"],\r\n                    filters: {\r\n                        item_code: row.item_code\r\n                    },\r\n                    order_by: \"creation desc\", // Sort by creation date in descending order\r\n                    limit_page_length: 1 // Fetch only the latest record\r\n                },\r\n                callback: function(r) {\r\n                    if (r.message && r.message.length > 0) {\r\n                        // Update the price field in the child table\r\n                        frappe.model.set_value(cdt, cdn, 'item_rate', r.message[0].price_list_rate);\r\n                    } else {\r\n                        frappe.msgprint(__('No Item Price found for Item Code {0}', [row.item_code]));\r\n                        frappe.model.set_value(cdt, cdn, 'item_rate', 0);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n});\r\n\r\n\r\n// frappe.ui.form.on('Order Booking Details', {\r\n// \trefresh(frm) {\r\n// \t    console.loog(\"Hello\")\r\n// \t\t// your code here\r\n// \t}\r\n// })\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// frappe.ui.form.on('Order Booking Form', {\r\n//     refresh: function(frm) {\r\n//         // Add a custom button to open the modal\r\n//         frm.add_custom_button(__('Update Items'), function() {\r\n//             open_order_booking_modal(frm);\r\n//         });\r\n//     }\r\n// });\r\nfunction open_order_booking_modal(frm) {\r\n    // Create the modal\r\n    let dialog = new frappe.ui.Dialog({\r\n        title: 'Manage Order Booking Details',\r\n        size: 'large', // Set the modal size to large\r\n        fields: [\r\n            {\r\n                fieldname: 'items_table',\r\n                label: 'Order Booking Items',\r\n                fieldtype: 'Table',\r\n                cannot_add_rows: false, // Allow adding rows\r\n                fields: [\r\n                    {\r\n                        fieldname: 'item_code',\r\n                        label: 'Item Code',\r\n                        fieldtype: 'Link',\r\n                        options: 'Item',\r\n                        in_list_view: 1,\r\n                        reqd: 1\r\n                    },\r\n                    {\r\n                        fieldname: 'item_rate',\r\n                        label: 'Item Price',\r\n                        fieldtype: 'Currency',\r\n                        in_list_view: 1\r\n                    },\r\n                    {\r\n                        fieldname: 'bom',\r\n                        label: 'BOM',\r\n                        fieldtype: 'Link',\r\n                        options: 'BOM',\r\n                        in_list_view: 1\r\n                    }\r\n                ],\r\n                data: frm.doc.order_booking_details || [],\r\n                get_data: function () {\r\n                    return dialog.fields_dict.items_table.grid.get_data();\r\n                }\r\n            }\r\n        ],\r\n        primary_action_label: 'Submit',\r\n        primary_action: function (data) {\r\n            update_order_booking_details(frm, data.items_table);\r\n            dialog.hide();\r\n        }\r\n    });\r\n\r\n    // Load the current child table data into the modal\r\n    load_order_booking_details(dialog, frm);\r\n\r\n    dialog.show();\r\n\r\n    // Attach event listener for item_code change (inside dialog)\r\n    attach_item_code_change_listener(dialog);\r\n}\r\n\r\n// Function to load data into the modal's table\r\nfunction load_order_booking_details(dialog, frm) {\r\n    let child_data = frm.doc.order_booking_details || [];\r\n\r\n    // Set data for the modal's table\r\n    dialog.fields_dict.items_table.df.data = child_data.map(row => ({\r\n        item_code: row.item_code,\r\n        item_rate: row.item_rate,\r\n        bom: row.bom\r\n    }));\r\n\r\n    // Refresh the grid to reflect changes\r\n    dialog.fields_dict.items_table.grid.refresh();\r\n}\r\n\r\n// Function to attach event listeners for item_code change\r\nfunction attach_item_code_change_listener(dialog) {\r\n    // Listen to changes on item_code field inside the table\r\n    dialog.fields_dict.items_table.grid.wrapper.on('change', '.grid-row input[data-fieldname=\"item_code\"]', function () {\r\n        \r\n        let row = $(this).closest('.grid-row');\r\n        conole.log(row)\r\n        let item_code = row.find('[data-fieldname=\"item_code\"]').val();\r\n        \r\n        if (item_code) {\r\n            fetch_item_price(item_code, dialog, row);  // Fetch item price for the selected item\r\n            filter_bom_field(dialog, item_code, row);  // Filter BOM field by item code\r\n        }\r\n    });\r\n}\r\n\r\n// Function to fetch the most recent item price for a given item code\r\nfunction fetch_item_price(item_code, dialog, row) {\r\n    frappe.call({\r\n        method: 'frappe.client.get_list',\r\n        args: {\r\n            doctype: 'Item Price',\r\n            filters: { item_code: item_code },\r\n            order_by: 'creation desc',\r\n            limit_page_length: 1\r\n        },\r\n        callback: function (response) {\r\n            if (response && response.message && response.message.length > 0) {\r\n                let item_rate = response.message[0].price_list_rate; // Assuming price_list_rate is the price field\r\n\r\n                // Update the item_rate field in the current row of the table\r\n                row.find('[data-fieldname=\"item_rate\"]').val(item_rate); // Set the item rate in the grid row\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\n// Function to filter the BOM field based on the selected item code\r\nfunction filter_bom_field(dialog, item_code, row) {\r\n    // Set a filter for the BOM field in the current row\r\n    row.find('[data-fieldname=\"bom\"]').attr('data-filters', JSON.stringify({ 'item_code': item_code }));\r\n    \r\n    // Refresh the grid to reflect the BOM filter\r\n    dialog.fields_dict.items_table.grid.refresh();\r\n}\r\n\r\n// Function to update the parent table with changes from the modal\r\nfunction update_order_booking_details(frm, updated_items) {\r\n    frm.clear_table('order_booking_details');\r\n    updated_items.forEach(item => {\r\n        let child = frm.add_child('order_booking_details');\r\n        child.item_code = item.item_code;\r\n        child.item_rate = item.item_rate; // Update price\r\n        child.bom = item.bom;\r\n    });\r\n    frm.refresh_field('order_booking_details');\r\n}\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Quality Inspection",
  "enabled": 1,
  "modified": "2024-09-03 01:58:47.056524",
  "module": null,
  "name": "QA",
  "script": "frappe.ui.form.on('Quality Inspection', {\n\titem_code(frm) {\n\t    if(frm.doc.item_code){\n\t       // alert(\"Hello\")\n\t       // This function will be executed after a delay of 2000 milliseconds (2 seconds)\nsetTimeout(function() {\n    // Code to be executed after the timeout\n    frappe.call({\n                method: \"serial_no_custom.utils.get_serial_no\", //dotted path to server method\n                args:{\"reference_type\":frm.doc.reference_type,\"reference_name\":frm.doc.reference_name,\"item_code\":frm.doc.item_code},\n                callback: function(r) {\n                    // code snippet\n                    // console.log(r)\n                    cur_frm.set_value(\"item_serial_no\",r.message)\n                }\n        });\n    \n}, 2000);\n\n\t        \n\t    }\n\t    \n\t\t// your code here\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Stock Entry",
  "enabled": 1,
  "modified": "2024-11-22 17:10:33.024138",
  "module": null,
  "name": "Stock Entry",
  "script": "// frappe.ui.form.on('Stock Entry', {\r\n//     refresh: function(frm) {\r\n//         if (frm.doc.work_order){\r\n//             frm.add_fetch('work_order', 'custom_order_booking', 'custom_order_booking');\r\n//         }\r\n//         // Define which fields you want to fetch\r\n//     }\r\n// });\r\n\r\nfrappe.ui.form.on('Stock Entry', {\r\n    refresh: function(frm) {\r\n        if (frm.doc.docstatuss != 1 && !frm.doc.custom_order_booking){\r\n            frappe.db.get_value('Work Order', frm.doc.work_order, 'custom_order_booking', function(value) {\r\n            frm.set_value('custom_order_booking', value.custom_order_booking);\r\n            });\r\n            \r\n        }\r\n        \r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 1,
  "modified": "2024-10-22 01:15:09.026348",
  "module": null,
  "name": "Sales Order",
  "script": "frappe.ui.form.on('Sales Order', {\r\n    refresh: function(frm) {\r\n        // Only allow the button after the document is submitted\r\n        if (frm.doc.docstatus === 1) {\r\n            frm.add_custom_button(__('Update Work Order Status in Items'), function() {\r\n                frappe.confirm(\r\n                    'Are you sure you want to update the work order status for all items?',\r\n                    function() {\r\n                        // Call a custom method to get the Work Order status\r\n                        frappe.call({\r\n                            method: 'order_booking_custom.utils.get_work_order_status',  // Replace 'your_app' with your app's name and set the correct method\r\n                            args: {\r\n                                sales_order: frm.doc.name\r\n                            },\r\n                            callback: function(response) {\r\n                                if (response.message) {\r\n                                    // The response message will be a dictionary with item codes as keys and statuses as values\r\n                                    let work_order_status = response.message;\r\n\r\n                                    // Iterate over each item in the Sales Order child table\r\n                                    frm.doc.items.forEach(function(row) {\r\n                                        if (work_order_status[row.item_code]) {\r\n                                            // Update the status field in the child table with the retrieved work order status\r\n                                            frappe.model.set_value(row.doctype, row.name, 'custom_status', work_order_status[row.item_code]);\r\n                                        }\r\n                                    });\r\n\r\n                                    // Refresh the child table field to show updated statuses\r\n                                    frm.refresh_field('items');\r\n                                    frappe.msgprint(__('Work order statuses updated successfully.'));\r\n                                    frappe.call({\r\n                                        method: 'frappe.client.save',\r\n                                        args: {\r\n                                            doc: frm.doc\r\n                                        },\r\n                                        callback: function(save_response) {\r\n                                            if (save_response.message) {\r\n                                                // frappe.msgprint(__('Work order statuses updated and document saved successfully.'));\r\n                                                frm.reload_doc();  // Reload the document to reflect the updated data\r\n                                            } else {\r\n                                                frappe.msgprint(__('Failed to save the document.'));\r\n                                            }\r\n                                        }\r\n                                    });\r\n                                } else {\r\n                                    frappe.msgprint(__('No work order statuses found.'));\r\n                                }\r\n                            }\r\n                        });\r\n                    }\r\n                );\r\n            });\r\n        }\r\n    }\r\n});\r\n",
  "view": "Form"
 }
]